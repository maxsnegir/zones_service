// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/zone/service.go

// Package mock_zone is a generated GoMock package.
package mock_zone

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	geojson "github.com/maxsnegir/zones_service/internal/domain/geojson"
)

// MockSaver is a mock of Saver interface.
type MockSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSaverMockRecorder
}

// MockSaverMockRecorder is the mock recorder for MockSaver.
type MockSaverMockRecorder struct {
	mock *MockSaver
}

// NewMockSaver creates a new mock instance.
func NewMockSaver(ctrl *gomock.Controller) *MockSaver {
	mock := &MockSaver{ctrl: ctrl}
	mock.recorder = &MockSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaver) EXPECT() *MockSaverMockRecorder {
	return m.recorder
}

// SaveZoneFromFeatureCollection mocks base method.
func (m *MockSaver) SaveZoneFromFeatureCollection(ctx context.Context, featureCollection geojson.FeatureCollection) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveZoneFromFeatureCollection", ctx, featureCollection)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveZoneFromFeatureCollection indicates an expected call of SaveZoneFromFeatureCollection.
func (mr *MockSaverMockRecorder) SaveZoneFromFeatureCollection(ctx, featureCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveZoneFromFeatureCollection", reflect.TypeOf((*MockSaver)(nil).SaveZoneFromFeatureCollection), ctx, featureCollection)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetZonesByIds mocks base method.
func (m *MockProvider) GetZonesByIds(ctx context.Context, ids []int) ([]geojson.ZoneGEOJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZonesByIds", ctx, ids)
	ret0, _ := ret[0].([]geojson.ZoneGEOJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZonesByIds indicates an expected call of GetZonesByIds.
func (mr *MockProviderMockRecorder) GetZonesByIds(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZonesByIds", reflect.TypeOf((*MockProvider)(nil).GetZonesByIds), ctx, ids)
}
